---
import Logo from "./Logo.astro";
---

<header id="landing-header"
	class="py-4 px-9 flex items-center fixed top-0 w-full justify-between z-40 "
>
	<div class="flex flex-grow basis-0">
		<Logo />
	</div>
	<nav class="">
		<ul
			class="flex text-sm [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:py-2 [&>li>a]:px-4"
		>
			<li><a href="#">Model S</a></li>
			<li><a href="#">Model 3</a></li>
			<li><a href="#">Model X</a></li>
			<li><a href="#">Model Y</a></li>
			<li><a href="#">Powerwall</a></li>
			<li><a href="#">Carga</a></li>
		</ul>
	</nav>
	<nav class="flex flex-grow justify-end basis-0">
		<ul
			class="flex text-sm [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:py-2 [&>li>a]:px-4"
		>
			<li><a href="#"> Soporte</a></li>
			<li><a href="#">Tienda</a></li>
			<li><a href="#">Cuenta</a></li>
			<li><a href="#">Menu</a></li>
		</ul>
	</nav>


	<!-- menu backdrop se desplaza segun la lista del nav o de cualquier nav dentro de
	el header -->
	<div id="menu-backrop" class={`
	absolute bg-black/5 backdrop-blur-lg rounded 
	left-[var(--left)] top-[var(--top)] 
	w-[var(--width)] h-[var(--height)] 
	transition-all duration-300 
	ease-in-out opacity-0 -z-10
	`}/>


</header>

<script>
	const listItem = document.querySelectorAll("#landing-header li")
	const menuBackdrop = document.querySelector("#menu-backrop") as HTMLElement
	listItem.forEach(item => {
		item.addEventListener("mouseover", () => {
			const {left, top, width, height} = item.getBoundingClientRect()
			menuBackdrop.style.setProperty("--top", `${top}px`)
			menuBackdrop.style.setProperty("--left", `${left}px`)
			menuBackdrop.style.setProperty("--width", `${width}px`)
			menuBackdrop.style.setProperty("--height", `${height}px`)
			menuBackdrop.style.opacity = "1"
			menuBackdrop.style.visibility = "visible"
		})
	})
</script>

<script>

	const $header = document.querySelector("#landing-header") as HTMLElement

	const observerOptions = {
		root: null,
		rootMargin: "0px", // en cuanto se vea el elemento
		threshold: 0.9 // porcentaje de visibilidad
	}

	// creamos el observador 
	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {
			const {isIntersecting} = entry
			if (isIntersecting) {
				const color = entry.target.getAttribute("data-header-color")
				$header.style.color = color
				
			}
		})
	}, observerOptions)

	const  $sections = document.querySelectorAll(".landing-section")
	$sections.forEach(section => {
		observer.observe(section)
	})

</script>